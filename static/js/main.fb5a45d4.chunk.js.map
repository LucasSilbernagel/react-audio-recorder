{"version":3,"sources":["../../src/react-audio-recorder/status.ts","../../src/react-audio-recorder/useTimer.tsx","../../src/react-audio-recorder/ReactAudioRecorder.tsx","ClassVersion.tsx","App.tsx","index.tsx"],"names":["RECORD_STATUS","useTimer","countRef","useRef","useState","timer","setTimer","handleStartTimer","setInterval","handlePauseTimer","clearInterval","handleResumeTimer","handleResetTimer","ReactAudioRecorder","render","dataArray","status","setStatus","audioResult","setAudioResult","errorMessage","setErrorMessage","startRecording","navigator","audio","localStream","mediaRecorder","MediaRecorder","event","error","stopRecording","audioData","Blob","type","window","track","pauseRecording","resumeRecording","ClassVersion","className","controls","src","PAUSED","Date","toISOString","substr","onClick","RECORDING","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fb5a45d4.chunk.js","sourcesContent":["export enum RECORD_STATUS {\n  IDLE = \"idle\",\n  RECORDING = \"recording\",\n  PAUSED = \"paused\",\n}\n","import { useState, useRef } from \"react\";\n\nconst useTimer = () => {\n  const countRef = useRef<any>(null);\n  const [timer, setTimer] = useState<number>(0);\n\n  const handleStartTimer = () => {\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handlePauseTimer = () => {\n    clearInterval(countRef.current);\n  };\n\n  const handleResumeTimer = () => {\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handleResetTimer = () => {\n    clearInterval(countRef.current);\n    setTimer(0);\n  };\n\n  return {\n    timer,\n    handleStartTimer,\n    handlePauseTimer,\n    handleResumeTimer,\n    handleResetTimer,\n  };\n};\n\nexport default useTimer;\n","import { ReactElement } from 'react'\nimport { useRef, useState } from 'react'\nimport { RECORD_STATUS } from './status'\nimport useTimer from './useTimer'\n\ntype record_status_type =\n  | RECORD_STATUS.RECORDING\n  | RECORD_STATUS.PAUSED\n  | RECORD_STATUS.IDLE\n\nlet mediaRecorder: MediaRecorder\nlet localStream: MediaStream\n\nexport const ReactAudioRecorder = ({\n  render\n}: {\n  render: ({\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  }: {\n    startRecording: () => void\n    stopRecording: () => void\n    pauseRecording: () => void\n    resumeRecording: () => void\n    status: string\n    audioResult: string\n    errorMessage: string\n    timer: number\n  }) => ReactElement\n}) => {\n  const dataArray = useRef<Array<Blob>>([])\n\n  const [status, setStatus] = useState<record_status_type>(RECORD_STATUS.IDLE)\n  const [audioResult, setAudioResult] = useState<string>('')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n\n  const {\n    timer,\n    handleStartTimer,\n    handlePauseTimer,\n    handleResumeTimer,\n    handleResetTimer\n  } = useTimer()\n\n  const startRecording = () => {\n    if (status === RECORD_STATUS.IDLE) {\n      try {\n        setErrorMessage('')\n        navigator.mediaDevices\n          .getUserMedia({ audio: true })\n          .then((mediaStreamObj: MediaStream) => {\n            localStream = mediaStreamObj\n            mediaRecorder = new MediaRecorder(mediaStreamObj)\n            mediaRecorder.start()\n            mediaRecorder.onstart = () => {\n              handleStartTimer()\n              setStatus(RECORD_STATUS.RECORDING)\n            }\n            mediaRecorder.ondataavailable = (event: BlobEvent) => {\n              dataArray.current.push(event.data)\n            }\n          })\n          .catch((error) => {\n            setErrorMessage(error?.message)\n          })\n      } catch (error) {\n        setErrorMessage(error?.message)\n      }\n    } else {\n      return\n    }\n  }\n\n  const resumeRecording = () => {\n    if (status === RECORD_STATUS.PAUSED) {\n      mediaRecorder.resume()\n      mediaRecorder.onresume = () => {\n        handleResumeTimer()\n        setStatus(RECORD_STATUS.RECORDING)\n      }\n    } else {\n      return\n    }\n  }\n\n  const pauseRecording = () => {\n    if (status === RECORD_STATUS.RECORDING) {\n      mediaRecorder.pause()\n      mediaRecorder.onpause = () => {\n        handlePauseTimer()\n        setStatus(RECORD_STATUS.PAUSED)\n      }\n    } else {\n      return\n    }\n  }\n\n  const stopRecording = () => {\n    if (status !== RECORD_STATUS.IDLE) {\n      mediaRecorder.stop()\n      mediaRecorder.onstop = () => {\n        handleResetTimer()\n        let audioData = new Blob(dataArray.current, { type: 'audio/wav;' })\n        dataArray.current = []\n        setAudioResult(window.URL.createObjectURL(audioData))\n        setStatus(RECORD_STATUS.IDLE)\n        localStream.getAudioTracks().forEach((track: MediaStreamTrack) => {\n          track.stop()\n        })\n      }\n    } else {\n      return\n    }\n  }\n\n  return render({\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  })\n}\n","import React from 'react'\nimport {\n  ReactAudioRecorder,\n  RECORD_STATUS\n} from '@sarafhbk/react-audio-recorder'\n\nfunction ClassVersion() {\n  return (\n    <ReactAudioRecorder\n      render={({\n        timer,\n        stopRecording,\n        startRecording,\n        pauseRecording,\n        resumeRecording,\n        audioResult,\n        status,\n        errorMessage\n      }) => (\n        <div className='container'>\n          <div className='inner-container'>\n            <audio controls src={audioResult} />\n            <p\n              className={`timer ${\n                status === RECORD_STATUS.PAUSED ? 'blink-animation' : ''\n              }`}\n            >\n              {new Date(timer * 1000).toISOString().substr(11, 8)}\n            </p>\n            <p className='status'>{status}</p>\n            <p className='error'>{errorMessage}</p>\n            <div className='buttons'>\n              <button\n                className='btn-play'\n                onClick={\n                  status === RECORD_STATUS.RECORDING\n                    ? pauseRecording\n                    : resumeRecording\n                }\n              >\n                <i\n                  className={`fas fa-${\n                    status === RECORD_STATUS.RECORDING ? 'pause' : 'play'\n                  }`}\n                ></i>\n              </button>\n              <button className='btn-record' onClick={startRecording}>\n                <i className={'fas fa-microphone'}></i>\n              </button>\n              <button className='btn-stop' onClick={stopRecording}>\n                <i className={'fas fa-stop'}></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    />\n  )\n}\n\nexport default ClassVersion\n","import React from 'react'\nimport ClassVersion from './ClassVersion'\n\nfunction App() {\n  return (\n    <div>\n      <ClassVersion />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport './index.css'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}